# ng-app

    Normalmente utilzado na tag <html>


#ng-controller

    O local aonde você colocar o atreibuto ng-controller automaticamente se torna a view, pois a view não é um arquivo, nada mais é que um conjunto de tags.
    Você pode ter no mesmo arquivo, vários 'ng-controller'.
    O mesmo pode ser utilizado em qualquer tag, como por exemplo no <body> ou em uma <div>


# ng-bind

    Substitui elementos por expressões.
    Ou seja, se você tive '$scope.app = "Phone List"', e fizer <h4 ng-bind="app"></h4>, "Phone List" será impresso na tela.
    Porém, você pode utilizar a interpolação, por exemplo: <h4>{{app}}</h4>, que terá o mesmo efeito.


# ng-repeat

    Iterando sobre os itens de uma coleção ou de um objeto.

# ng-model

    Faz o contrário do ng-bind, ou seja, pega uma coisa da view e DEFINE no $scope.

# ng-click

    Basicamente é um evento, igual ao onClick, onBlur etc...


# OBS IMPORTANTE:

    Evitar de ler o $scope dentro do controller.


# ng-disabled

    Disabilitar um elemento dinamicamente.


# ng-options

    Renderiza as opções de um select.
    Sempre deve ser utilizada juntamente com ng-model.


# ng-class - ng-style

    Aplicando CSS e estilos dinamicamente.


# ng-hide - ng-show - ng-if

    Apresenta elementos de forma condicional.

    A diferença entre eles é que o ng-hide e ng-show trabalham somente com a
    visibilidade, ou seja, trabalham a nivel de css para apresentar ou esconder
    o elemento.

    O ng-if trabalha a nível de dom, ou seja, ele remove o elemento do dom e cria
    o elemento no dom novamente. Visualmente o comportamento é igual, porém tudo
    dependo do caso que você vai utilizar.

    O ng-if é muito útil quando não queremos carregar muito a página sem a nacessidade.


# ng-include

    Incluir conteúdo dinamicamente.



#### Form validation

        # ng-required

            Determina obrigatoriedade e um determinado campo de um fomulário.

            Necessário usar <form> e declarar um name, ou seja, <form name="contactForm">

            O que ocorrerá é que o angular vai construir um objeto chamado contactForm
            contendo todas as regras do formulário, como por exemplo os campos que estão
            como required.


            $valid - $invalid

              Verifica se o objeto declarado no <form> criado pelo angular está válido
              ou inválido de acordo com suas regras de required.

            $pristine - $dirty

              Verifica se um formulário ou campo já foi utilizado alguma vez.


        # ng-minlength - ng-maxlength

            Valida quanto a tamanho mínimo e maximo de uma campo.

            Lembrando que não é uma mascara, ou seja, não vai impedir de incluir menos
            que o minimo ou mais que o máximo, porém será utilizado para validar se
            é valido ou não.


        # ng-pattern

            Define uma RegExp para validar um campo.


                  ##### Form Properties

                  Para estas propriedades é necessário utilizar a tag <form> dando um name para
                  a mesma, ou seja <form name="nameForm">

                            # $valid - $invalid

                              Consultar a validade de um campo ou do form inteiro.


                            # $pristine - $dirty

                              Verifica se um formulário ou campo já foi utilizado alguma vez.


                            # $error

                              É um objeto que contem as validações e seus respectivos status.

                              No caso de termos mais de um tipo de validação em um campo, como por exemplo
                              required e minlength, o $valid ou $invalid não serve, pois precisamos mostrar
                              alertas diferentes por exemplo.

                              Neste caso utilizamos o $error, na qual podemos verificar cada uma das
                              validações de forma independente, possibilitando a apresentação de mensagem
                              diferentes.




##### Filtros

  Transformam o resultado de uma expressão, realizando operações como a
  formatação de data, a conversão de moeda e a ordenação de Array.

  OBS IMPORTANTE: Filtros se utilizados diretamente na view podem ser um
                  gargalo de perfomance, sendo assim, é possível utilizarmos
                  os filtros no controller.
                  Para utilizarmos os filtros no controller é necessário
                  passarmos na declaração do controller não só o $scope,
                  mas também o $filter.

  # uppercase - lowercase

      Alterar uma string para maiúscula ou minúscula.

  # date

      Formata uma data usando usando uma máscara.

  # filter

      Filtra um array com base em um critério.

  # orderBy

      Ordena um array com base em um critério.

  # currency

      Converte um número para moeda.

  # number

      Formata um número

  # limitTo

      Limira um array ou uma String



###### Integrando com back-end por AJAX

  O $http deve ser injetado na declaração do controller juntamente com o $scope.
  Example: ($scope, $http).

  # $http

      Permite a realização de requisições utilizando XMLHttpRequest ou via JSONP.

      O $http disponibiliza uma séria de funções para utilizarmos:

          - get(url, config);
          - post(url, data, config);
          - put(url, data, config);
          - delete(url, config);
          - head(url, config);
          - jsonp(url, config);



####### Formar de organizar o projeto

  Foi apresentado quatro formas de se organizar o projeto, mas nada impede que
  estas formar tenham variações.

  São elas:

      # Inline Style
          - Tudo dentro do index.html.

                Cenários possíveis para utilizar:
                    - Projetos muito simples
                    - Protótipos
                    - Provas de conceitos
                    - Hello World


      # Stereotyped Style (Pouco utilizado)
          - Os componentes do mesmo tipo juntos.

                Cenários possíveis para utilizar:
                    - Projetos pequenos
                    - Poucos componentes
                    - Pouco código em cada componente
                    - Domínio único

                Exemplo:
                    > app/
                      > css/
                          app,css
                      > js/
                          app.js
                          controller.js
                          directives.js
                          filters.js
                      > lib/
                          angular.js
                      > view/
                          login.html
                          list.html
                      > index.html


      # Specific Style (Utilizado no estudo)
          - Um arquivo para cada componente

                Cenários possíveis para utilizar:
                    - Projetos médios
                    - Muitos components
                    - Número de linhas em cada arquivo já começa a incomodar
                    - Domínio relativamente extenso

                Exemplo:
                    > app/
                      > css/
                          app,css
                      > js/
                          > controller/
                              loginCtrl.js
                              listCtrl,js
                          > directives/
                              panelDirective.js
                              tableDirectives.js
                          > services/
                              loginService.js
                              listService.js
                          > app.js


      # Domain Style
          - Agrupando os arquivos por dominio

                Cenários possíveis para utilizar:
                    - Projetos grandes
                    - Utilização de módulos
                    - Domínio extenso

                Exemplo:
                > app/
                  > app/
                      app,css
                      app.js
                  > login
                      login.css
                      login.html
                      loginCtrl.js





####### Criando Serviços

        Um Serviço é um singleton, ou seja, um objeto único, criado na
        inicialização da aplicação e que está disponível para ser injetado
        em outros componentes.


        ### Tipos de Serviços

              # Factory Function

                    Métodos fabrica, ou seja, faz a invocação e tem um objeto
                    de retorno.

              # Constructor Function (Service)

                   É como se fosse um contrutor de uma classe, ou seja,
                   damos new e passamos os parâmetros, isto é "Constructor Function".

              # value

                  Come se fosse um arquivo de propriedades, é possível configurar
                  propriedades como por exemplo URL's para que outros serviços utilizem.

              # Provider

                  O serviço que dá origem a todos os outros, é um serviço mais
                  complexo que os outros, porém nos dá a habilidade de configuralo.

              # config

                  Semelhante ao value, porém é possivel injetar configuração
                  em serviços do tipo provider.

              # constant

                  Muito semelhante ao serviço value, porém a diferença é que
                  ele pode ser injetado no serviço provider.



####### Criando Filtros

        Filtros transformam o resultado de uma expressão, realizando operações
        como a formatação de data, conversão de moeda e a ordenação de Array.

        # Filter

            Seria basicamente um "serviço" porém do tipo filter.

            Retorna uma função que recebe um input. Ou seja, recebe um
            parâmetros, faz alguma coisa com aquele parâmetros e retorno o valor.



####### Criando Diretivas (Parte 1)


      A criação de uma diretiva é igual como criar um serviço,
      precisamos localizar nosso módulo, e então utilizar '.directive',
      passando um nome e a função, esta função retorno o objeto chamado
      'Directive Definition Object'.

      Este objeto é composto por propriedades e estas propriedades definem o
      comportamento de cada diretiva que criarmos.

      # Parte 1:
          - template
          - templateUrl
          - replace
          - restrict
          - scope
          - transclude


      Importante que como o js é case sentive e o html é case insentive,
      no caso de criarmos uma diretiva chamada 'uiAlert', podemos utilizar
      no html, 'uialert', uiAlert', 'UIALERT' ou 'ui-alert'.
      As diretivas do proprias diretivas do angular são declaradas sem o '-',
      como por exemplo, 'ng-repeat', que na verdade é 'ngRepeat'.


      # template e templateUrl

            Especifica o template ou a url do template a ser incluído
            dentro do elemento que estiver utilizando a diretiva.

      # replace

            Substitui toda a tag com a diretiva pelo template criado na diretiva.
            Não é muito popular.

      # restrict

            Restringe o modo de utilização da diretiva ao atributo, elemento,
            classe e comentário, ou ainda uma combinação deles.
            Caso não seja definido, o padrão é que a diretiva seja atribuida pelo atributo.

                # Tipo de restrição

                      A - Diretiva restrita ao atributo do elemento.
                      E - Diretiva restrita ao elemento.
                      C - Diretiva restrita a classe do elemento.
                      M - Diretiva restrita ai comentário do elemento.

      # scope

            Serve para isolar o scope da diretiva, ou seja, cria um scope proprio para a diretiva,
            sendo assim a diretiva não tem acesso valores do scope do controller.

                # @

                  Server para fazer o bind entre o valor colocado no atributo, para o valor que
                  será passado para a propriedade do scope.

                # =

                  Faz um bind entre o valor da propriedade do scope do controller para
                  o scope da diretiva.


    # transclude

          Serve para conseguirmos incluir a mensagem por exemplo entre as tag do elemetno,
          ou seja, não precisamos passar a mensagem no valor de uma atributo.
          Basta incluir na diretiva, transclude: true.

          Apesar de ser um novo scope, ele não é isolado, herdando todas as propriedades do scope externo.

          Necessário incluir ng-transclude na tag onde queremos que a mensagem apareça dentro.


####### Criando Diretivas (Parte 2)

        * Estudar a API de ngModel, tem bastante funções úteis.

        Parte 2:

            Vamos trabalhar com diretivas de mascara.


        # link

            Executada depois do template ter sido compilado,
            podemos utilizá-la para iteragir com o DOM, tratando
            eventos ou memso para definir o comportamento associado
            com a lógica da diretiva.
            Ou seja, podemos utilizar para mostrar ou ocultar alguma coisa.

        # require

            Estabelece um vínculo com outra diretiva interagindo por meio do controller,
            que é um dos parâmetros da função link.
            É possível indicar que o vinculo será realizado com uma diretiva pai,
            nesta caso é necessário utilizar "^" antes do nome da diretiva.



####### Modularizando o Projeto

        # O que é um modulo:

              Um módulo é uma coleção de componentes, ou seja, um conjunto de controllers,
              directives, filters, services, entre outros tipos de componente utilizandos pela aplicação.

        # Beneficios

             Um dos grandes beneficios é o isolamento, pois permite isolarmos completamente uma determinada funcionalidade.



####### Single-Page-Application

        # ngRoute:

        # $routeProvider:

              Serve para configurar rotas a partir de uma configuração.
